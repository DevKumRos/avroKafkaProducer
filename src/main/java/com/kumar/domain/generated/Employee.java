/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kumar.domain.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7867749862765397011L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"com.kumar.domain.generated\",\"fields\":[{\"name\":\"empId\",\"type\":\"int\"},{\"name\":\"empName\",\"type\":\"string\"},{\"name\":\"department\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\",\"default\":26}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Employee> ENCODER =
      new BinaryMessageEncoder<Employee>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Employee> DECODER =
      new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Employee> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Employee> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Employee> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Employee>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Employee to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Employee from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Employee instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Employee fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int empId;
   private java.lang.CharSequence empName;
   private java.lang.CharSequence department;
   private int age;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Employee() {}

  /**
   * All-args constructor.
   * @param empId The new value for empId
   * @param empName The new value for empName
   * @param department The new value for department
   * @param age The new value for age
   */
  public Employee(java.lang.Integer empId, java.lang.CharSequence empName, java.lang.CharSequence department, java.lang.Integer age) {
    this.empId = empId;
    this.empName = empName;
    this.department = department;
    this.age = age;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return empId;
    case 1: return empName;
    case 2: return department;
    case 3: return age;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: empId = (java.lang.Integer)value$; break;
    case 1: empName = (java.lang.CharSequence)value$; break;
    case 2: department = (java.lang.CharSequence)value$; break;
    case 3: age = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'empId' field.
   * @return The value of the 'empId' field.
   */
  public int getEmpId() {
    return empId;
  }


  /**
   * Sets the value of the 'empId' field.
   * @param value the value to set.
   */
  public void setEmpId(int value) {
    this.empId = value;
  }

  /**
   * Gets the value of the 'empName' field.
   * @return The value of the 'empName' field.
   */
  public java.lang.CharSequence getEmpName() {
    return empName;
  }


  /**
   * Sets the value of the 'empName' field.
   * @param value the value to set.
   */
  public void setEmpName(java.lang.CharSequence value) {
    this.empName = value;
  }

  /**
   * Gets the value of the 'department' field.
   * @return The value of the 'department' field.
   */
  public java.lang.CharSequence getDepartment() {
    return department;
  }


  /**
   * Sets the value of the 'department' field.
   * @param value the value to set.
   */
  public void setDepartment(java.lang.CharSequence value) {
    this.department = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static com.kumar.domain.generated.Employee.Builder newBuilder() {
    return new com.kumar.domain.generated.Employee.Builder();
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.kumar.domain.generated.Employee.Builder newBuilder(com.kumar.domain.generated.Employee.Builder other) {
    if (other == null) {
      return new com.kumar.domain.generated.Employee.Builder();
    } else {
      return new com.kumar.domain.generated.Employee.Builder(other);
    }
  }

  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static com.kumar.domain.generated.Employee.Builder newBuilder(com.kumar.domain.generated.Employee other) {
    if (other == null) {
      return new com.kumar.domain.generated.Employee.Builder();
    } else {
      return new com.kumar.domain.generated.Employee.Builder(other);
    }
  }

  /**
   * RecordBuilder for Employee instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private int empId;
    private java.lang.CharSequence empName;
    private java.lang.CharSequence department;
    private int age;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kumar.domain.generated.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.empId)) {
        this.empId = data().deepCopy(fields()[0].schema(), other.empId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.empName)) {
        this.empName = data().deepCopy(fields()[1].schema(), other.empName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.department)) {
        this.department = data().deepCopy(fields()[2].schema(), other.department);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kumar.domain.generated.Employee other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.empId)) {
        this.empId = data().deepCopy(fields()[0].schema(), other.empId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.empName)) {
        this.empName = data().deepCopy(fields()[1].schema(), other.empName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.department)) {
        this.department = data().deepCopy(fields()[2].schema(), other.department);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'empId' field.
      * @return The value.
      */
    public int getEmpId() {
      return empId;
    }


    /**
      * Sets the value of the 'empId' field.
      * @param value The value of 'empId'.
      * @return This builder.
      */
    public com.kumar.domain.generated.Employee.Builder setEmpId(int value) {
      validate(fields()[0], value);
      this.empId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'empId' field has been set.
      * @return True if the 'empId' field has been set, false otherwise.
      */
    public boolean hasEmpId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'empId' field.
      * @return This builder.
      */
    public com.kumar.domain.generated.Employee.Builder clearEmpId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'empName' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmpName() {
      return empName;
    }


    /**
      * Sets the value of the 'empName' field.
      * @param value The value of 'empName'.
      * @return This builder.
      */
    public com.kumar.domain.generated.Employee.Builder setEmpName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.empName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'empName' field has been set.
      * @return True if the 'empName' field has been set, false otherwise.
      */
    public boolean hasEmpName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'empName' field.
      * @return This builder.
      */
    public com.kumar.domain.generated.Employee.Builder clearEmpName() {
      empName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'department' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartment() {
      return department;
    }


    /**
      * Sets the value of the 'department' field.
      * @param value The value of 'department'.
      * @return This builder.
      */
    public com.kumar.domain.generated.Employee.Builder setDepartment(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.department = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'department' field has been set.
      * @return True if the 'department' field has been set, false otherwise.
      */
    public boolean hasDepartment() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'department' field.
      * @return This builder.
      */
    public com.kumar.domain.generated.Employee.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.kumar.domain.generated.Employee.Builder setAge(int value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public com.kumar.domain.generated.Employee.Builder clearAge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Employee build() {
      try {
        Employee record = new Employee();
        record.empId = fieldSetFlags()[0] ? this.empId : (java.lang.Integer) defaultValue(fields()[0]);
        record.empName = fieldSetFlags()[1] ? this.empName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.department = fieldSetFlags()[2] ? this.department : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Employee>
    WRITER$ = (org.apache.avro.io.DatumWriter<Employee>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Employee>
    READER$ = (org.apache.avro.io.DatumReader<Employee>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.empId);

    out.writeString(this.empName);

    out.writeString(this.department);

    out.writeInt(this.age);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.empId = in.readInt();

      this.empName = in.readString(this.empName instanceof Utf8 ? (Utf8)this.empName : null);

      this.department = in.readString(this.department instanceof Utf8 ? (Utf8)this.department : null);

      this.age = in.readInt();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.empId = in.readInt();
          break;

        case 1:
          this.empName = in.readString(this.empName instanceof Utf8 ? (Utf8)this.empName : null);
          break;

        case 2:
          this.department = in.readString(this.department instanceof Utf8 ? (Utf8)this.department : null);
          break;

        case 3:
          this.age = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










